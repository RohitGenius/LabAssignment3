// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using DAL.Entities;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace DAL
{
    public partial class AppDbContext
    {
        private AppDbContextProcedures _procedures;

        public virtual AppDbContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new AppDbContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public AppDbContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Usp_AddProductResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Usp_DeleteProductResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Usp_GetAllCategoriesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Usp_GetAllProductsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Usp_ProductResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Usp_UpdateProductResult>().HasNoKey().ToView(null);
        }
    }

    public interface IAppDbContextProceduresContract
    {
        Task<int> Usp_AddProductAsync(int? CategoryId, string Name, string Description, decimal? UnitPrice, string Summary, CancellationToken cancellationToken = default);
        Task<int> Usp_DeleteProductAsync(int? Id, CancellationToken cancellationToken = default);
        Task<List<Usp_GetAllCategoriesResult>> Usp_GetAllCategoriesAsync(CancellationToken cancellationToken = default);
        Task<List<Usp_GetAllProductsResult>> Usp_GetAllProductsAsync(CancellationToken cancellationToken = default);
        Task<List<Usp_ProductResult>> Usp_ProductAsync(int? ProductId, CancellationToken cancellationToken = default);
        Task<int> Usp_UpdateProductAsync(int? Id, string Name, string Description, decimal? UnitPrice, string Summary, int? CategoryId, CancellationToken cancellationToken = default);
    }

    public partial class AppDbContextProcedures
    {
        private readonly AppDbContext _context;

        public AppDbContextProcedures(AppDbContext context)
        {
            _context = context;
        }

        public virtual async Task<int> Usp_AddProductAsync(int? CategoryId, string Name, string Description, decimal? UnitPrice, string Summary, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryId",
                    Value = CategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Name",
                    Size = 250,
                    Value = Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 250,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UnitPrice",
                    Precision = 18,
                    Scale = 2,
                    Value = UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Summary",
                    Size = 50,
                    Value = Summary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Usp_AddProduct] @CategoryId, @Name, @Description, @UnitPrice, @Summary", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Usp_DeleteProductAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Usp_DeleteProduct] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Usp_GetAllCategoriesResult>> Usp_GetAllCategoriesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Usp_GetAllCategoriesResult>("EXEC @returnValue = [dbo].[Usp_GetAllCategories]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Usp_GetAllProductsResult>> Usp_GetAllProductsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Usp_GetAllProductsResult>("EXEC @returnValue = [dbo].[Usp_GetAllProducts]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Usp_ProductResult>> Usp_ProductAsync(int? ProductId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProductId",
                    Value = ProductId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Usp_ProductResult>("EXEC @returnValue = [dbo].[Usp_Product] @ProductId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Usp_UpdateProductAsync(int? Id, string Name, string Description, decimal? UnitPrice, string Summary, int? CategoryId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Name",
                    Size = 250,
                    Value = Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 250,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UnitPrice",
                    Precision = 18,
                    Scale = 2,
                    Value = UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Summary",
                    Size = 50,
                    Value = Summary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryId",
                    Value = CategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Usp_UpdateProduct] @Id, @Name, @Description, @UnitPrice, @Summary, @CategoryId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
